/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.equifax.fabric.uk.purposing.nonlimitedregister.history;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RawFields extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RawFields\",\"namespace\":\"com.equifax.fabric.uk.purposing.nonlimitedregister.history\",\"fields\":[{\"name\":\"BUSINESS_NAME\",\"type\":[\"null\",\"string\"],\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"ADDRESS\",\"type\":[\"null\",\"string\"],\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"LOCALITY\",\"type\":[\"null\",\"string\"],\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"TOWN\",\"type\":[\"null\",\"string\"],\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"COUNTY\",\"type\":[\"null\",\"string\"],\"default\":null,\"dataClassification\":\"3\"},{\"name\":\"POSTCODE\",\"type\":[\"null\",\"string\"],\"default\":null,\"dataClassification\":\"3\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence BUSINESS_NAME;
  @Deprecated public java.lang.CharSequence ADDRESS;
  @Deprecated public java.lang.CharSequence LOCALITY;
  @Deprecated public java.lang.CharSequence TOWN;
  @Deprecated public java.lang.CharSequence COUNTY;
  @Deprecated public java.lang.CharSequence POSTCODE;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RawFields() {}

  /**
   * All-args constructor.
   */
  public RawFields(java.lang.CharSequence BUSINESS_NAME, java.lang.CharSequence ADDRESS, java.lang.CharSequence LOCALITY, java.lang.CharSequence TOWN, java.lang.CharSequence COUNTY, java.lang.CharSequence POSTCODE) {
    this.BUSINESS_NAME = BUSINESS_NAME;
    this.ADDRESS = ADDRESS;
    this.LOCALITY = LOCALITY;
    this.TOWN = TOWN;
    this.COUNTY = COUNTY;
    this.POSTCODE = POSTCODE;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return BUSINESS_NAME;
    case 1: return ADDRESS;
    case 2: return LOCALITY;
    case 3: return TOWN;
    case 4: return COUNTY;
    case 5: return POSTCODE;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: BUSINESS_NAME = (java.lang.CharSequence)value$; break;
    case 1: ADDRESS = (java.lang.CharSequence)value$; break;
    case 2: LOCALITY = (java.lang.CharSequence)value$; break;
    case 3: TOWN = (java.lang.CharSequence)value$; break;
    case 4: COUNTY = (java.lang.CharSequence)value$; break;
    case 5: POSTCODE = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'BUSINESS_NAME' field.
   */
  public java.lang.CharSequence getBUSINESSNAME() {
    return BUSINESS_NAME;
  }

  /**
   * Sets the value of the 'BUSINESS_NAME' field.
   * @param value the value to set.
   */
  public void setBUSINESSNAME(java.lang.CharSequence value) {
    this.BUSINESS_NAME = value;
  }

  /**
   * Gets the value of the 'ADDRESS' field.
   */
  public java.lang.CharSequence getADDRESS() {
    return ADDRESS;
  }

  /**
   * Sets the value of the 'ADDRESS' field.
   * @param value the value to set.
   */
  public void setADDRESS(java.lang.CharSequence value) {
    this.ADDRESS = value;
  }

  /**
   * Gets the value of the 'LOCALITY' field.
   */
  public java.lang.CharSequence getLOCALITY() {
    return LOCALITY;
  }

  /**
   * Sets the value of the 'LOCALITY' field.
   * @param value the value to set.
   */
  public void setLOCALITY(java.lang.CharSequence value) {
    this.LOCALITY = value;
  }

  /**
   * Gets the value of the 'TOWN' field.
   */
  public java.lang.CharSequence getTOWN() {
    return TOWN;
  }

  /**
   * Sets the value of the 'TOWN' field.
   * @param value the value to set.
   */
  public void setTOWN(java.lang.CharSequence value) {
    this.TOWN = value;
  }

  /**
   * Gets the value of the 'COUNTY' field.
   */
  public java.lang.CharSequence getCOUNTY() {
    return COUNTY;
  }

  /**
   * Sets the value of the 'COUNTY' field.
   * @param value the value to set.
   */
  public void setCOUNTY(java.lang.CharSequence value) {
    this.COUNTY = value;
  }

  /**
   * Gets the value of the 'POSTCODE' field.
   */
  public java.lang.CharSequence getPOSTCODE() {
    return POSTCODE;
  }

  /**
   * Sets the value of the 'POSTCODE' field.
   * @param value the value to set.
   */
  public void setPOSTCODE(java.lang.CharSequence value) {
    this.POSTCODE = value;
  }

  /** Creates a new RawFields RecordBuilder */
  public static com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder newBuilder() {
    return new com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder();
  }
  
  /** Creates a new RawFields RecordBuilder by copying an existing Builder */
  public static com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder newBuilder(com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder other) {
    return new com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder(other);
  }
  
  /** Creates a new RawFields RecordBuilder by copying an existing RawFields instance */
  public static com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder newBuilder(com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields other) {
    return new com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder(other);
  }
  
  /**
   * RecordBuilder for RawFields instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RawFields>
    implements org.apache.avro.data.RecordBuilder<RawFields> {

    private java.lang.CharSequence BUSINESS_NAME;
    private java.lang.CharSequence ADDRESS;
    private java.lang.CharSequence LOCALITY;
    private java.lang.CharSequence TOWN;
    private java.lang.CharSequence COUNTY;
    private java.lang.CharSequence POSTCODE;

    /** Creates a new Builder */
    private Builder() {
      super(com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.BUSINESS_NAME)) {
        this.BUSINESS_NAME = data().deepCopy(fields()[0].schema(), other.BUSINESS_NAME);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ADDRESS)) {
        this.ADDRESS = data().deepCopy(fields()[1].schema(), other.ADDRESS);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.LOCALITY)) {
        this.LOCALITY = data().deepCopy(fields()[2].schema(), other.LOCALITY);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TOWN)) {
        this.TOWN = data().deepCopy(fields()[3].schema(), other.TOWN);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.COUNTY)) {
        this.COUNTY = data().deepCopy(fields()[4].schema(), other.COUNTY);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.POSTCODE)) {
        this.POSTCODE = data().deepCopy(fields()[5].schema(), other.POSTCODE);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing RawFields instance */
    private Builder(com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields other) {
            super(com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.SCHEMA$);
      if (isValidValue(fields()[0], other.BUSINESS_NAME)) {
        this.BUSINESS_NAME = data().deepCopy(fields()[0].schema(), other.BUSINESS_NAME);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ADDRESS)) {
        this.ADDRESS = data().deepCopy(fields()[1].schema(), other.ADDRESS);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.LOCALITY)) {
        this.LOCALITY = data().deepCopy(fields()[2].schema(), other.LOCALITY);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TOWN)) {
        this.TOWN = data().deepCopy(fields()[3].schema(), other.TOWN);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.COUNTY)) {
        this.COUNTY = data().deepCopy(fields()[4].schema(), other.COUNTY);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.POSTCODE)) {
        this.POSTCODE = data().deepCopy(fields()[5].schema(), other.POSTCODE);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'BUSINESS_NAME' field */
    public java.lang.CharSequence getBUSINESSNAME() {
      return BUSINESS_NAME;
    }
    
    /** Sets the value of the 'BUSINESS_NAME' field */
    public com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder setBUSINESSNAME(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.BUSINESS_NAME = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'BUSINESS_NAME' field has been set */
    public boolean hasBUSINESSNAME() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'BUSINESS_NAME' field */
    public com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder clearBUSINESSNAME() {
      BUSINESS_NAME = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'ADDRESS' field */
    public java.lang.CharSequence getADDRESS() {
      return ADDRESS;
    }
    
    /** Sets the value of the 'ADDRESS' field */
    public com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder setADDRESS(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ADDRESS = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'ADDRESS' field has been set */
    public boolean hasADDRESS() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'ADDRESS' field */
    public com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder clearADDRESS() {
      ADDRESS = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'LOCALITY' field */
    public java.lang.CharSequence getLOCALITY() {
      return LOCALITY;
    }
    
    /** Sets the value of the 'LOCALITY' field */
    public com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder setLOCALITY(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.LOCALITY = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'LOCALITY' field has been set */
    public boolean hasLOCALITY() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'LOCALITY' field */
    public com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder clearLOCALITY() {
      LOCALITY = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'TOWN' field */
    public java.lang.CharSequence getTOWN() {
      return TOWN;
    }
    
    /** Sets the value of the 'TOWN' field */
    public com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder setTOWN(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.TOWN = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'TOWN' field has been set */
    public boolean hasTOWN() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'TOWN' field */
    public com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder clearTOWN() {
      TOWN = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'COUNTY' field */
    public java.lang.CharSequence getCOUNTY() {
      return COUNTY;
    }
    
    /** Sets the value of the 'COUNTY' field */
    public com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder setCOUNTY(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.COUNTY = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'COUNTY' field has been set */
    public boolean hasCOUNTY() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'COUNTY' field */
    public com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder clearCOUNTY() {
      COUNTY = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'POSTCODE' field */
    public java.lang.CharSequence getPOSTCODE() {
      return POSTCODE;
    }
    
    /** Sets the value of the 'POSTCODE' field */
    public com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder setPOSTCODE(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.POSTCODE = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'POSTCODE' field has been set */
    public boolean hasPOSTCODE() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'POSTCODE' field */
    public com.equifax.fabric.uk.purposing.nonlimitedregister.history.RawFields.Builder clearPOSTCODE() {
      POSTCODE = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public RawFields build() {
      try {
        RawFields record = new RawFields();
        record.BUSINESS_NAME = fieldSetFlags()[0] ? this.BUSINESS_NAME : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ADDRESS = fieldSetFlags()[1] ? this.ADDRESS : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.LOCALITY = fieldSetFlags()[2] ? this.LOCALITY : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.TOWN = fieldSetFlags()[3] ? this.TOWN : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.COUNTY = fieldSetFlags()[4] ? this.COUNTY : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.POSTCODE = fieldSetFlags()[5] ? this.POSTCODE : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
